// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client/index.js';
import type { GetHealthData, GetHealthResponses, GetUrlsByUserData, GetUrlsByUserResponses, CreateUrlData, CreateUrlResponses, GetUrlBySlugData, GetUrlBySlugResponses, DeleteUrlData, DeleteUrlResponses, UpdateSlugData, UpdateSlugResponses, GoogleAuthData, GoogleAuthResponses, GoogleAuthCallbackData, GoogleAuthCallbackResponses, AuthenticateWithRefreshTokenData, AuthenticateWithRefreshTokenResponses, SignoutData, SignoutResponses, GetUserProfileData, GetUserProfileResponses, GetUrlAnalyticsData, GetUrlAnalyticsResponses, TrackUrlData, TrackUrlResponses } from './types.gen.js';
import { client as _heyApiClient } from './client.gen.js';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const getHealth = <ThrowOnError extends boolean = false>(options?: Options<GetHealthData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetHealthResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/health',
        ...options
    });
};

export const getUrlsByUser = <ThrowOnError extends boolean = false>(options?: Options<GetUrlsByUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUrlsByUserResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/urls',
        ...options
    });
};

export const createUrl = <ThrowOnError extends boolean = false>(options: Options<CreateUrlData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateUrlResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/urls',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getUrlBySlug = <ThrowOnError extends boolean = false>(options: Options<GetUrlBySlugData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUrlBySlugResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/urls/{slug}',
        ...options
    });
};

export const deleteUrl = <ThrowOnError extends boolean = false>(options: Options<DeleteUrlData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUrlResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/urls/{id}',
        ...options
    });
};

export const updateSlug = <ThrowOnError extends boolean = false>(options: Options<UpdateSlugData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateSlugResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/urls/{id}/slug',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const googleAuth = <ThrowOnError extends boolean = false>(options?: Options<GoogleAuthData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GoogleAuthResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/oauth/google',
        ...options
    });
};

export const googleAuthCallback = <ThrowOnError extends boolean = false>(options?: Options<GoogleAuthCallbackData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GoogleAuthCallbackResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/oauth/google/callback',
        ...options
    });
};

export const authenticateWithRefreshToken = <ThrowOnError extends boolean = false>(options?: Options<AuthenticateWithRefreshTokenData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AuthenticateWithRefreshTokenResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/refresh',
        ...options
    });
};

export const signout = <ThrowOnError extends boolean = false>(options?: Options<SignoutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<SignoutResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/signout',
        ...options
    });
};

export const getUserProfile = <ThrowOnError extends boolean = false>(options?: Options<GetUserProfileData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserProfileResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/profile',
        ...options
    });
};

export const getUrlAnalytics = <ThrowOnError extends boolean = false>(options: Options<GetUrlAnalyticsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUrlAnalyticsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/urls/trackings/{urlId}',
        ...options
    });
};

export const trackUrl = <ThrowOnError extends boolean = false>(options: Options<TrackUrlData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TrackUrlResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/urls/trackings/{urlId}',
        ...options
    });
};